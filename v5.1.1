#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <DHT.h>
#include <RtcDS1302.h>
#include <Servo.h> // Include the Servo library


// Pin configuration
#define DHTPIN 2
#define MQ2PIN A1 // Analog pin for MQ2 sensor
#define BUZZERPIN 3
#define BUTTON1PIN 4
#define BUTTON2PIN 5
#define BUTTON3PIN 6
#define BUTTON4PIN 7 // Mute button
#define BUTTON5PIN 12  // Define pin for 5th button


#define CLK_PIN 8
#define DATA_PIN 9
#define RST_PIN 10

// DHT setup
#define DHTTYPE DHT22
DHT dht(DHTPIN, DHTTYPE);

// LCD setup
#define I2C_ADDR 0x27
#define LCD_COLUMNS 20
#define LCD_LINES 4
LiquidCrystal_I2C lcd(I2C_ADDR, LCD_COLUMNS, LCD_LINES);

// Servo setup
#define SERVOPIN 11 // Define the pin for the servo motor
Servo myServo; // Create a Servo object


// RTC setup
ThreeWire myWire(DATA_PIN, CLK_PIN, RST_PIN);
RtcDS1302<ThreeWire> Rtc(myWire);

// Thresholds
const int temperatureThresholds[] = {85, 87, 90, 95}; // Example thresholds, replace as needed
const int MQ2Threshold = 750;

// Variables
int currentPage = 1; 
bool buzzerActive = false;
bool buzzerMQ2Active = false;
bool buzzerMuted = false;
unsigned long buzzerStartTime = 0;
int currentThresholdIndex = 0;
unsigned long lastButtonPress = 0;
const unsigned long debounceDelay = 300;
unsigned long lastDHTRead = 0;
const unsigned long DHTReadInterval = 2000;
bool servoManualControl = false;  // Track manual servo control state


// Function declarations
void updateDisplay(float temperature = NAN, float humidity = NAN, int mq2Value = -1);
void togglePage();
void manageBuzzer(float temperature, int mq2Value);
void scrollPresets();
void muteBuzzer();
void printDateTime(const RtcDateTime& dt);
void manageServo(float temperature, int mq2Value);
void handle5thButtonPress();


// Initialize setup()
void setup() {
  lcd.init(); // Initialize the LCD
  lcd.backlight(); // Turn on the backlight

  dht.begin(); // Initialize the DHT sensor
  Rtc.Begin(); // Initialize the RTC
  RtcDateTime compiled = RtcDateTime(__DATE__, __TIME__);
  if (!Rtc.IsDateTimeValid()) {
    Rtc.SetDateTime(compiled);
  }
  if (Rtc.GetIsWriteProtected()) {
    Rtc.SetIsWriteProtected(false);
  }
  if (!Rtc.GetIsRunning()) {
    Rtc.SetIsRunning(true);
  }

  pinMode(MQ2PIN, INPUT);
  pinMode(BUZZERPIN, OUTPUT);
  pinMode(BUTTON1PIN, INPUT_PULLUP);
  pinMode(BUTTON2PIN, INPUT_PULLUP);
  pinMode(BUTTON3PIN, INPUT_PULLUP);
  pinMode(BUTTON4PIN, INPUT_PULLUP);
  pinMode(BUTTON5PIN, INPUT_PULLUP);  // Set 5th button pin to input with pull-up resistor
  
  myServo.attach(11); // Attach the servo to pin 11


  lcd.setCursor(0, 0);
  lcd.print("Welcome to your");
  lcd.setCursor(0, 1);
  lcd.print("Smart 3D Enclosure");
  lcd.setCursor(0, 2);
  lcd.print("Version 5.1.1");
  delay(5000); // Display for 5 seconds
  lcd.clear();

  updateDisplay(); // Display initial page
}

void loop() {
  unsigned long currentMillis = millis();
  
  if (digitalRead(BUTTON1PIN) == LOW && (currentMillis - lastButtonPress) > debounceDelay) {
    lastButtonPress = currentMillis;
    togglePage();
  }

  if (digitalRead(BUTTON2PIN) == LOW && (currentMillis - lastButtonPress) > debounceDelay) {
    lastButtonPress = currentMillis;
    lcd.clear();
  }

  if (digitalRead(BUTTON3PIN) == LOW && (currentMillis - lastButtonPress) > debounceDelay) {
    lastButtonPress = currentMillis;
    scrollPresets();
  }

  if (digitalRead(BUTTON4PIN) == LOW && (currentMillis - lastButtonPress) > debounceDelay) {
    lastButtonPress = currentMillis;
    muteBuzzer();
  }
  if (digitalRead(BUTTON5PIN) == LOW && (millis() - lastButtonPress) > debounceDelay) {
  lastButtonPress = millis();
  servoManualControl = !servoManualControl;  // Toggle the servo position

  if (servoManualControl) {
    myServo.write(45);  // Move servo to 180 degrees
  } else {
    myServo.write(0);    // Move servo to 0 degrees
  }
}


  if (currentMillis - lastDHTRead >= DHTReadInterval) {
    lastDHTRead = currentMillis;
    float temperature = dht.readTemperature(true);
    float humidity = dht.readHumidity();
    int mq2Value = analogRead(MQ2PIN);

    updateDisplay(temperature, humidity, mq2Value);
    manageBuzzer(temperature, mq2Value);
    manageServo(temperature, mq2Value);
  }

  delay(100); // Short delay for stability
}

void togglePage() {
  currentPage = (currentPage == 1) ? 2 : (currentPage == 2) ? 3 : (currentPage == 3) ? 4 : 1;
  lcd.clear(); // Clear the display to avoid overlapping content
  updateDisplay(); // Update display based on the new page
}

void manageBuzzer(float temperature, int mq2Value) {
    unsigned long currentTime = millis();

    // Handle temperature threshold
    if (!buzzerMuted) {
        if (temperature > temperatureThresholds[currentThresholdIndex]) {
            if (!buzzerActive) {
                buzzerActive = true; // Set buzzer active state
                buzzerStartTime = currentTime; // Reset buzzer timer
                tone(BUZZERPIN, 1000); // Activate buzzer
            }
            if (currentTime - buzzerStartTime >= 500) {
                // Change buzzer sound pattern if needed
                tone(BUZZERPIN, 1000);
                delay(500);
                noTone(BUZZERPIN);
                delay(9500);
                buzzerStartTime = millis(); // Reset the timer
            }
        } else {
            // When the temperature is normal
            if (buzzerActive) {
                buzzerActive = false; // Reset buzzer active state
                noTone(BUZZERPIN); // Turn off buzzer
            }
        }

        // Handle MQ2 threshold
        if (mq2Value > MQ2Threshold) {
            if (!buzzerMQ2Active) {
                buzzerMQ2Active = true; // Set MQ2 buzzer active state
                buzzerStartTime = currentTime; // Reset buzzer timer
                tone(BUZZERPIN, 1000); // Activate buzzer
            }
            if (currentTime - buzzerStartTime >= 1500) {
                // Change buzzer sound pattern if needed
                tone(BUZZERPIN, 1000);
                delay(1500);
                noTone(BUZZERPIN);
                delay(8500);
                buzzerStartTime = millis(); // Reset the timer
            }
        } else {
            // When the MQ2 value is normal
            if (buzzerMQ2Active) {
                buzzerMQ2Active = false; // Reset MQ2 buzzer active state
                noTone(BUZZERPIN); // Turn off buzzer
            }
        }
    } else {
        noTone(BUZZERPIN); // Ensure buzzer is off when muted
    }
}

// Update manageServo to respect manual control
void manageServo(float temperature, int mq2Value) {
    if (!servoManualControl) {  // Only move servo if not in manual control
        // Handle temperature threshold
        if (temperature > temperatureThresholds[currentThresholdIndex]) {
            myServo.write(45);  // Move servo to 45 degrees when temperature exceeds threshold
        } else {
            myServo.write(0);   // Move servo back to 0 degrees when temperature is normal
        }

        // Handle MQ2 threshold
        if (mq2Value > MQ2Threshold) {
            myServo.write(45); // Move servo to 45 degrees when MQ2 value exceeds threshold
        } else if (temperature <= temperatureThresholds[currentThresholdIndex]) {
            myServo.write(0);   // Reset servo to 0 degrees if both conditions are normal
        }
    }
}

// Modify the 5th button logic to enable manual control
void handle5thButtonPress() {
    servoManualControl = true;  // Enable manual control
    myServo.write(45);  // Manually move the servo to 90 degrees (or any other desired angle)
    delay(1000);  // Delay for 2 seconds
    servoManualControl = false; // Disable manual control after 2 seconds
}

void updateDisplay(float temperature, float humidity, int mq2Value) {
  RtcDateTime now = Rtc.GetDateTime();
  
  if (currentPage == 1) {
    lcd.setCursor(0, 0);
    lcd.print("Temp: ");
    if (isnan(temperature)) {
      lcd.print("NA");
    } else {
      lcd.print(temperature);
      lcd.print(" F");
    }

    lcd.setCursor(0, 1);
    lcd.print("Hum: ");
    if (isnan(humidity)) {
      lcd.print("NA");
    } else {
      lcd.print(humidity);
      lcd.print(" %");
    }

    lcd.setCursor(0, 2);
    lcd.print("MQ2 Value: ");
    if (mq2Value == -1) {
      lcd.print("NA");
    } else {
      lcd.print(mq2Value);
    }

    lcd.setCursor(0, 3);
    lcd.print("Page 1");
  } 
  else if (currentPage == 2) {
    unsigned long uptimeMillis = millis();
    unsigned long uptimeSeconds = uptimeMillis / 1000;
    unsigned long uptimeMinutes = uptimeSeconds / 60;
    unsigned long uptimeHours = uptimeMinutes / 60;
    unsigned long seconds = uptimeSeconds % 60;
    unsigned long minutes = uptimeMinutes % 60;
    unsigned long hours = uptimeHours;

    lcd.setCursor(0, 0);
    lcd.print("Uptime: ");
    lcd.print(hours);
    lcd.print("h ");
    lcd.print(minutes);
    lcd.print("m ");
    lcd.print(seconds);
    lcd.print("s");

    lcd.setCursor(0, 1);
    lcd.print("Preset Temp: ");
    lcd.print(temperatureThresholds[currentThresholdIndex]);

    lcd.setCursor(0, 2);
    lcd.print("Temp: ");
    if (isnan(temperature)) {
      lcd.print("NA");
    } else {
      lcd.print(temperature);
      lcd.print(" F");
    }

    lcd.setCursor(0, 3);
    lcd.print("Page 2");
  } 
  else if (currentPage == 3) {
    lcd.setCursor(0, 0);
    lcd.print("made by Diego J");

    lcd.setCursor(0, 1);
    lcd.print("Jimenez");

    lcd.setCursor(0, 2);
    lcd.print("Buzzer: ");
    lcd.print(buzzerMuted ? "Muted" : "Active");

    lcd.setCursor(0, 3);
    lcd.print("Page 3");
  } 
  else if (currentPage == 4) {
    lcd.setCursor(0, 0);
    lcd.print("Date: ");
    printDateTime(now);

    lcd.setCursor(0, 1);
    lcd.print("Time: ");
    lcd.print(now.Hour());
    lcd.print(":");
    if (now.Minute() < 10) lcd.print("0");
    lcd.print(now.Minute());

    lcd.setCursor(0, 2);
    lcd.print("v 5.1.1");

    lcd.setCursor(0, 3);
    lcd.print("Page 4");
  }
}

void scrollPresets() {
  currentThresholdIndex = (currentThresholdIndex + 1) % (sizeof(temperatureThresholds) / sizeof(temperatureThresholds[0]));
  lcd.clear();
  updateDisplay();
}

void muteBuzzer() {
  buzzerMuted = !buzzerMuted;
  lcd.clear();
  updateDisplay();
}

void printDateTime(const RtcDateTime& dt) {
  lcd.print(dt.Month());
  lcd.print(" ");
  lcd.print(dt.Day());
  lcd.print(", ");
  lcd.print(dt.Year());
}
